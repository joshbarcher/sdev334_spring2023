package sorts;

import java.util.Random;

/**
 * Utilities class for sorting algorithms.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
public class SortingUtilities
{
    /**
     * A method used to swap two elements in an array. This
     * should be used to adjust positions of elements in a
     * comparison-based sort.
     *
     * @param array the array being sorted
     * @param first the first index
     * @param second the second index
     */
    public static void swap(int[] array, int first, int second)
    {
        int temp = array[first];
        array[first] = array[second];
        array[second] = temp;
    }

    /**
     * This method reports whether two adjacent elements in an
     * array are out of order (not in ascending order).
     *
     * @param array the array to search
     * @return true if an element is out of order, false if
     *         all adjacent elements are in order
     */
    public static boolean detectAdjacentInversions(int[] array)
    {
        for (int i = 0; i < array.length - 1; i++)
        {
            if (array[i] > array[i + 1])
            {
                return true;
            }
        }

        return false;
    }

    /**
     * Generates a random array of integers. This is useful
     * for testing sorting routines.
     *
     * @param size the size of the array to create
     * @param low the minimum value in the array
     * @param high the maximum value in the array
     * @return the newly created array
     */
    public static int[] generateRandomArray(int size, int low, int high)
    {
        Random random = new Random();
        int[] array = new int[size];

        for (int i = 0; i < array.length; i++)
        {
            array[i] = low + random.nextInt(high - low + 1);
        }

        return array;
    }
}